local Headers = require 'luncheon.headers'
local normal_headers = require 'spec.normal_headers'

describe('Headers', function ()
    describe('append_chunk', function()
        it('All Standard headers', function()
            local h = Headers.new()
            for _, set in ipairs(normal_headers) do
                local chunk = set[1]
                local key = set[2]
                local expected = set[3]
                h:append_chunk(chunk)
                assert(h:get_one(key) == expected, string.format('%s found %s expected %s', key, h[key], expected))
            end
        end)
        it('from_chunk', function()
            local h = Headers.from_chunk('Accept: application/json')
            assert(h:get_one('accept') == 'application/json', string.format('expected application/json, found %s', h.accept))
        end)
        it('append', function()
            local h = Headers.new()
            h:append('accept', 'application/json1')
            assert(h:get_one('accept') == 'application/json1', string.format('expected application/json, found %s', h.accept))
            h:append('accept', 'application/json2')
            assert(h:get_all('accept')[1] == 'application/json1', string.format('expected application/json1, found %s', h.accept))
            assert(h:get_all('accept')[2] == 'application/json2', string.format('expected application/json2, found %s', h.accept))
        end)
        it('append_chunk', function()
            local h = Headers.new()
            local _, err1 = h:append_chunk('Accept: application/json')
            assert(err1 == nil, string.format('error frrom first append "%s"', err1))
            local _, err2 = h:append_chunk(' application/text')
            assert(err2 == nil, string.format('error frrom second append "%s"', err2))
            assert(h:get_one('accept') == 'application/json  application/text', string.format('bad header "%s"', h.accept))
        end)
        it('append_chunk continuation with no key', function ()
            local h = Headers.new()
            local _, err1 = h:append_chunk(' bad')
            assert(err1 == 'Header continuation with no key', err1)
        end)
        it('append_chunk nil', function ()
            local h = Headers.new()
            local _, err1 = h:append_chunk()
            assert.are.equal('nil header', err1)
        end)
        it('append', function()
            local h = Headers.new()
            h:append('accept', 'application/json1')
            assert(h:get_one('accept') == 'application/json1', string.format('expected application/json, found %s', h.accept))
            h:append('accept', 'application/json2')
            assert(h:get_all('accept')[1] == 'application/json1', string.format('expected application/json1, found %s', h.accept))
            assert(h:get_all('accept')[2] == 'application/json2', string.format('expected application/json2, found %s', h.accept))
            h:append('accept', 'application/json3')
            assert(h:get_all('accept')[1] == 'application/json1', string.format('expected application/json1, found %s', h.accept))
            assert(h:get_all('accept')[2] == 'application/json2', string.format('expected application/json2, found %s', h.accept))
            assert(h:get_all('accept')[3] == 'application/json3', string.format('expected application/json3, found %s', h.accept))
        end)
        it('get_one', function()
            local h = Headers.new()
            h:append('accept', 'application/json1')
            assert(h:get_one('accept') == 'application/json1', string.format('expected application/json1, found %s', h:get_one('accept')))
            h:append('accept', 'application/json2')
            assert(h:get_one('accept') == 'application/json2', string.format('expected application/json1, found %s', h:get_one('accept')))
        end)
        it('get_all', function()
            local h = Headers.new()
            h:append('accept', 'application/json1')
            local table1 = h:get_all('accept')
            assert(table1[1] == 'application/json1', string.format('expected application/json1, found %s', table[1]))
            h:append('accept', 'application/json2')     
            local table2 = h:get_all('accept')
            assert(table2[1] == 'application/json1', string.format('expected application/json1, found %s', table[1]))
            assert(table2[2] == 'application/json2', string.format('expected application/json2, found %s', table[2]))
        end)
        it('Can handle multi line headers', function()
            local h = Headers.new()
            h:append_chunk('x-Multi-Line-Header: things and stuff')
            h:append_chunk(' places and people')
            assert(h:get_one('x_multi_line_header'), 'thinigs and stuff\nplaces and people')
        end)
        it('can handle cjk values single line', function()
            local value = "臺北金沢市"
            local h = Headers.from_chunk(string.format('set-cookie: %s', value))
            local v = h:get_one("set-cookie")
            assert.are.same(value, v)
        end)
        it('can handle cjk values multi-line', function()
            local value =
            [[군사재판을 관할하기 위하여 특별법원으로서 군사법원을 둘 수 있다. 대통령은 취임에 즈음하여 다음의 선서를 한다. 공무원의 직무상 불법행위로 손해를 받은 국민은 법률이 정하는 바에 의하여 국가 또는 공공단체에 정당한 배상을 청구할 수 있다. 이 경우 공무원 자신의 책임은 면제되지 아니한다.\n법원은 최고법원인 대법원과 각급법원으로 조직된다. 모든 국민은 통신의 비밀을 침해받지 아니한다. 모든 국민은 보건에 관하여 국가의 보호를 받는다.]]
            local h = Headers.from_chunk(string.format('set-cookie: %s', value))
            local v = h:get_one("set-cookie")
            assert.are.same(value, v)
        end)
    end)
    describe('serialize_header', function ()
        it('can handle normal header', function()
            for _, set in ipairs(normal_headers) do
                local header = Headers.serialize_header(set[2], set[3])
                assert(header == set[1], string.format('expected %s found %s', set[1], header))
            end
        end)
        it('multiline header', function()
            local header1 = Headers.serialize_header('accept', {'application/json1'})
            assert(header1 == 'Accept: application/json1', string.format('expected application/json1, found %s', header1))
            local header2 = Headers.serialize_header('accept', {'application/json1', 'application/json2'})
            assert(header2 == 'Accept: application/json2', string.format('expected application/json2, found %s', header2))
        end)
    end)
end)
